I"R<blockquote>
  <p>最近看到了一个scheme实现的通用记忆化方法，但其代码晦涩难懂，整理了一份python版本，发现远比lisp简单明了，遂写一篇博客保留之。</p>
</blockquote>

<!-- more -->

<h2 id="1-intro">1. Intro</h2>

<p><em>记忆法</em>(Memorization)，或称<em>表格法</em>(tabulation)是一种常用的缓存技术，采用这种技术的函数将前面已经算出的一些值记录在一个局部的字典里，这种手段能够大大加快一些函数的效率。采用记忆法的过程维护着一个字典，其中保存着前面已经做过的调用求出的值，以产生这些值的对应参数作为Key。当这种过程被调用时，它首先检查有关的字典，看看相应的值是否已经在那里，如果找到了，就直接返回这个值; 否则就以正常的方式计算出相应的值，并将这个值保存到表格里。</p>

<p>举一个经典的例子:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="n">memo</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="c1"># 不带记忆的版本
</span><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1">## fib(30) time elapsed: 0.2773573199999999
</span>
<span class="c1"># 带记忆的版本
</span><span class="k">def</span> <span class="nf">fib_memo</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
<span class="c1">## fib_memo(30) time elapsed: 4.91160000000157e-05
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>容易知道不带记忆的函数计算较带记忆的函数慢很多。记忆法很不错，但是采用上述记忆法带来的缺点有:</p>

<ol>
  <li>需要修改函数的具体实现</li>
  <li>要引入一个全局变量进行记忆</li>
  <li>记忆的方法不通用</li>
</ol>

<h2 id="2-generalize">2. Generalize</h2>

<p>针对以上三个缺点，我们来逐一解决。</p>

<h3 id="21-消除全局变量">2.1 消除全局变量</h3>

<p>还是以斐波那契为例，memo的目的是记录函数运行的结果，要做到这一点不需要使用全局变量，只需要让我们的函数带上自由变量即可。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">get_fib</span><span class="p">():</span>
    <span class="n">memo</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="nf">inner</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">inner</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
     <span class="k">return</span> <span class="n">inner</span>
<span class="n">fib</span> <span class="o">=</span> <span class="nf">get_fib</span><span class="p">()</span>

<span class="c1">## fib(30) time elapsed: 4.8156000000076915e-05
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="22-让记忆方法通用">2.2 让记忆方法通用</h3>

<p>通过前面的修改，我们消除了全局变量。观察到<code class="language-plaintext highlighter-rouge">inner</code>中对<code class="language-plaintext highlighter-rouge">memo</code>进行了修改的只有一行<code class="language-plaintext highlighter-rouge">memo[n] = inner(n - 1) + inner(n - 2)</code>，这里可以抽象成为一个计算过程<code class="language-plaintext highlighter-rouge">f</code>，<code class="language-plaintext highlighter-rouge">f</code>可作为参数传入。</p>

<p>根据这个idea我们得到了以下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">memorize</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
	<span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
	<span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
		<span class="k">if</span> <span class="n">n</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
			<span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
	<span class="k">return</span> <span class="n">inner</span>
	
<span class="n">fib_memo_lambda</span> <span class="o">=</span> <span class="nf">memorize</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> 
                           <span class="nf">fib_memo_lambda</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nf">fib_memo_lambda</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">))</span>
<span class="c1">## fib_memo_lambda(30) time elapsed: 9.787600000010777e-05
</span>
<span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这样我们把记忆的过程抽象出来了，memorize就成为了一个通用的记忆方法。但是这个实现我们还是需要修改fib原来的实现，并且fib_memo这种利用lambda表达式的方法令人费解（<em>It is actually a little tricky,</em>具体tricky在哪儿，请看思考题），能不能再优化一下？</p>

<blockquote>
  <p>思考题: 把fib_memo直接定义为memorize(fib)是否能提高计算效率？为什么？</p>
</blockquote>

<h3 id="23-无需改动原函数实现记忆">2.3 无需改动原函数实现记忆</h3>

<p>我们只需要利用Python中的装饰器(<em><a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">Decorator</a></em>),就能达到不改动函数实现而能提升计算效率的效果。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>
<span class="k">def</span> <span class="nf">memorize</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">inner</span>

<span class="nd">@memorize</span>
<span class="k">def</span> <span class="nf">fib_memo_decorator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nf">fib_memo_decorator</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib_memo_decorator</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1">## fib_memo_decorator(30) time elapsed: 4.57430000000425e-05
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="3-思考题的研究">3. 思考题的研究</h2>

<p>先说结论: <strong>memorize(fib)不能起到记忆效果！！！</strong></p>

<p>很多人可能觉得<strong>“你这写的都是啥玩意儿阿，一会儿自由变量一会儿lambda一会儿decorator的，传lambda和定义好的函数由啥区别啊,为什么定义好的函数不能直接传入memorize而要用decorator啊。”</strong>，别急，我们慢慢来。</p>

<p>（以下内容可能有误，有大佬发现烦请指出)</p>

<p>先画出memorize求值的环境模型。</p>

<p><img src="https://raw.githubusercontent.com/JohnsonLee-debug/tuchuang/main/memorize_2.png" alt="" /></p>

<p>要区分<code class="language-plaintext highlighter-rouge">fib_memo_lambda</code>，<code class="language-plaintext highlighter-rouge">decorator</code>和<code class="language-plaintext highlighter-rouge">fib_memo = memorize(fib)</code>,只需要将实际参数应用于上面这个环境模型中即可。</p>

<h3 id="31-fib_memo_lambda的求值过程">3.1 fib_memo_lambda的求值过程</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">memorize</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
	<span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
	<span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
		<span class="k">if</span> <span class="n">n</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
			<span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
	<span class="k">return</span> <span class="n">inner</span>
	
<span class="n">fib_memo_lambda</span> <span class="o">=</span> <span class="nf">memorize</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span>
                           <span class="nf">fib_memo_lambda</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib_memo_lambda</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>fib_memo_lambda绑定的环境如下图所示:</p>

<p><img src="https://raw.githubusercontent.com/JohnsonLee-debug/tuchuang/main/fib_memo_lambda.png" alt="" /></p>

<p>从这里可以看出<code class="language-plaintext highlighter-rouge">fib_memo_lambda</code>绑定环境中的<code class="language-plaintext highlighter-rouge">f</code>其实是一个<code class="language-plaintext highlighter-rouge">unnamed lambda</code>,该<code class="language-plaintext highlighter-rouge">unnamed lambda</code>运算时会去递归的调用有记忆的<code class="language-plaintext highlighter-rouge">fib_memo_lambda</code>，该递归调用开销不大，因为我递归调用的是带记忆的过程。</p>

<h3 id="32-fib_memo_lambda--memorizefib无效的原因">3.2 fib_memo_lambda = memorize(fib)无效的原因</h3>

<p>先上图，<code class="language-plaintext highlighter-rouge">fib_memo_lambda=memorize(fib)</code>的环境模型如下。</p>

<p><img src="https://raw.githubusercontent.com/JohnsonLee-debug/tuchuang/main/fib_memo_lambda_fake.png" alt="" /></p>

<p>可以看到<code class="language-plaintext highlighter-rouge">memorize(fib)</code>这里的<code class="language-plaintext highlighter-rouge">unnamed lambda</code>递归调用的其实是不带记忆的过程<code class="language-plaintext highlighter-rouge">fib</code>,那么<code class="language-plaintext highlighter-rouge">memorize(fib)</code>每次计算一个不在<code class="language-plaintext highlighter-rouge">memo</code>中的值的时候，就会进入到无记忆的<code class="language-plaintext highlighter-rouge">fib</code>当中去求值，其速度自然也就慢了。</p>

<h3 id="33-fib_memo_decorator有效的原因">3.3 fib_memo_decorator有效的原因</h3>

<p>先看装饰器的定义：</p>

<blockquote>
  <p>装饰器语法只是一种语法糖，以下两个函数定义在语义上完全等价:</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">f</span><span class="p">(...):</span>
    <span class="bp">...</span>
<span class="n">f</span> <span class="o">=</span> <span class="nf">staticmethod</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

<span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">f</span><span class="p">(...):</span>
    <span class="bp">...</span>
</pre></td></tr></tbody></table></code></pre></div>  </div>

  <p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">PEP对decorator的解释</a></p>
</blockquote>

<p>也就是说,以下两个语句完全等价</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nd">@memorize</span>
<span class="k">def</span> <span class="nf">fib_memo_decorator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>

<span class="n">fib_memo_decorator</span> <span class="o">=</span> <span class="nf">memorize</span><span class="p">(</span><span class="n">fib_memo_decorator</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这个过程中<code class="language-plaintext highlighter-rouge">fib_memo_decorator</code>发生了重新绑定。</p>

<p><code class="language-plaintext highlighter-rouge">fib_memo_decorator</code>在加装饰器前的样子：</p>

<p><img src="https://raw.githubusercontent.com/JohnsonLee-debug/tuchuang/main/fib_memo_decorator_before.png" alt="" /></p>

<p>容易看出就是个普通的递归过程。</p>

<p>执行<code class="language-plaintext highlighter-rouge">fib_memo_decorator=memorize(fib_memo_decorator)</code>:</p>

<p><img src="https://raw.githubusercontent.com/JohnsonLee-debug/tuchuang/main/fib_memo_decorator_after.png" alt="" /></p>

<p>虚线为<code class="language-plaintext highlighter-rouge">fib_memo_decorator</code>发生的第二次绑定。</p>

<p>可以看出发生二次绑定后，<code class="language-plaintext highlighter-rouge">inner</code>内的<code class="language-plaintext highlighter-rouge">f</code>递归调用的也是带记忆的过程了。</p>

<h2 id="4-总结">4. 总结</h2>

<p>懒得总结了，应该讲的很清楚了_(´ཀ`」 ∠)_。</p>
:ET